Usamos o CSS.MODULE para evitar que estilizações que deveriam
ser aplicadas em apenas 1 componente não sejam aplicadas em outras partes.
Isso nos permite usar classes com o mesmo nome para 
componentes diferentes.

-webkit-font-smoothing: Ajuda a tornar as fonts que não são padrão do sistema a ficarem mais bonitas no navegador.

Sempre use tamanho de medida relativa (rem)
Isso ajuda a melhorar a acessibilidade da aplicação.

DISPLAY GRID
** grid-template-columns: 256px 1fr 
No código acima, definimos qual vai ser o tamanho das colunas do nosso grid. 
Setamos um valor fixo para a primeira coluna e a segunda coluna vai ter o tamanho do que couber dentro dela. ou seja, ela vai crescer conforme os conteúdos forem aumentando. 

CURIOSIDADE CSS
.post + .post 
Essa regra de CSS determina que uma estilização só será aplicada se um elemento existir antes ou depois dele.

.post > header 
O sinal de > indica pegar uma classe que está DENTRO, então é o header que está DENTRO da classe post

.commentForm:focus-within footer - Essa propriedade é diferente do focus tradicional
Se houver algum foco dentro de footer ele vai aplicar
o focus-within, e apenas essa tag vai receber a regra css definida. 


UNIDADE DE MEDIDA rem

Ela determina que tudo em tela vai se adaptar ao tamanho da font que o usuário escolher.
Ideal para acessibilidade 

USE STATE
São variáveis que eu quero que o componente monitore. 
Quando tiver uma mudança de valor, o estado vai executar essa mudança para o react

O useState retorna um array com 2 itens.
1 - Aváriavel que guarda o valor
2 - A função que altera essa variável que guarda o valor.
const = [variável, setVariável] = useState()
Sempre que eu quiser mudar o valor da variável, a função que altera o valor dela, será acionada, informando ao React que é hora de executar uma ação.

CHAVE KEY 
A chave key serve para ajudar p react a identificar qual 
informação já estava em tela. 
Isso é importantre porque ajuda a diminuir o rempo de 
rerenderização, evitando que componentes que já estavam em tela 
sejam carregados de novo. Isso melhora a performance da aplicação.

COMUNICAÇÃO ENTRE componentes
Fazemos essa comunicação por usar as propriedades do componente
que queremos manipular dentro do componente manipulador.
Podemos fazer funções entre comentários

IMITABILIDADE -> As variáveis não sofrem mutação
Ou seja, nós nunca alteramos o valor de uma variável na nossa aplicação
Nós criamos um novo espaço na memória,

ATUALIZAÇÃO DE ESTADO QUE DEPENDE DE UMA ATUALIZAÇÃO DELE MESMO
DEVEMOS UTILIZAR ESSE padrão

funtion nomeFunctio () {
  setAtualizadorDoEstato ((recebeUmValor) => {
    return recebeUmValor + 1
  })
}